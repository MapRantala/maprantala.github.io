<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NED on Node Dangles</title>
    <link>https://maprantala.com/tags/ned/</link>
    <description>Recent content in NED on Node Dangles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 07 Jul 2010 14:05:20 -0500</lastBuildDate>
    <atom:link href="https://maprantala.com/tags/ned/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>NED Processing in Python and Geoprocessing</title>
      <link>https://maprantala.com/2010/07/07/ned-processing-in-python-and-geoprocessing/</link>
      <pubDate>Wed, 07 Jul 2010 14:05:20 -0500</pubDate>
      <guid>https://maprantala.com/2010/07/07/ned-processing-in-python-and-geoprocessing/</guid>
      <description>&lt;p&gt;The &lt;a href=&#34;http://www.usgs.gov/&#34;&gt;USGS&lt;/a&gt; updated a significant portion of &lt;a href=&#34;http://ned.usgs.gov/&#34;&gt;NED&lt;/a&gt; data for my state in June.  I recently downloaded the updates, processed them–projecting and converting the elevations from meters to feet–using python and geoprocessing.  My python skills are still pretty crude but I was able to get the job done.&lt;/p&gt;
&lt;p&gt;One of the benefits of working for the public sector is that I can more freely publish code without worrying about &amp;lsquo;trade secrets&amp;rsquo; or what have you so I thought I would put my code out for anyone to see, maybe someone will find it useful.  It is split into two separate files, mostly because I used &lt;!-- raw HTML omitted --&gt;Model Builder&lt;!-- raw HTML omitted --&gt; to generate the main processing chunk of code (Project_Reclassify.py) and another script to control looping, etc. The code isn&amp;rsquo;t pretty and you&amp;rsquo;ll see the results of my development process with two subroutines in LaunchScript.py that could really be one.&lt;/p&gt;
&lt;h3 id=&#34;heading&#34;&gt;&lt;/h3&gt;
&lt;h3 id=&#34;launchscriptpy&#34;&gt;LaunchScript.py&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;import Project_Reclassify

mConversion = &amp;quot;3.28084&amp;quot;
mProjection = &amp;quot;PROJCS[&#39;NAD_1983_UTM_Zone_15N&#39;,GEOGCS[&#39;GCS_North_American_1983&#39;,DATUM[&#39;D_North_American_1983&#39;,SPHEROID[&#39;GRS_1980&#39;,6378137.0,298.257222101]],PRIMEM[&#39;Greenwich&#39;,0.0],UNIT[&#39;Degree&#39;,0.0174532925199433]],PROJECTION[&#39;Transverse_Mercator&#39;],PARAMETER[&#39;False_Easting&#39;,500000.0],PARAMETER[&#39;False_Northing&#39;,0.0],PARAMETER[&#39;Central_Meridian&#39;,-93.0],PARAMETER[&#39;Scale_Factor&#39;,0.9996],PARAMETER[&#39;Latitude_Of_Origin&#39;,0.0],UNIT[&#39;Meter&#39;,1.0]]&amp;quot;
mCellSize = &amp;quot;10&amp;quot;

#Project_Reclassify.Process(&amp;quot;C:\mgs\Projects\NED_10m\n44w092\grdn44w092_13&amp;quot;, mProjection, mConversion,&amp;quot;C:\mgs\Projects\NED_10m\n44w092\try30&amp;quot;,mCellSize)

def CallIt (inDir,inGrid,outGrid):
fullinFN = inDir+&#39;\&#39;+inGrid
fulloutFN = &#39;C:\mgs\Projects\NED_10m\Output\&#39;+outGrid
tmpGridFN = &#39;c:\temp\t&#39;+outGrid
Project_Reclassify.Process(fullinFN, mProjection, mConversion,fulloutFN,mCellSize,tmpGridFN)

def CallIt2 (inGrd,inoutGrd):
outDir = &#39;C:\mgs\Projects\NED_10m\&#39; + inGrd + &#39;\&#39; + inGrd

outGrd = &#39;grd&#39;+inGrd+&#39;_13&#39;

CallIt(outDir,outGrd,inoutGrd)

#CallIt2(&amp;quot;n44w092&amp;quot;,&amp;quot;LaCrosse_W&amp;quot;)
CallIt2(&amp;quot;n44w093&amp;quot;,&amp;quot;MasonCity_E&amp;quot;)
CallIt2(&amp;quot;n44w094&amp;quot;,&amp;quot;MasonCity_W&amp;quot;)
CallIt2(&amp;quot;n44w095&amp;quot;,&amp;quot;Fairmont_E&amp;quot;)
CallIt2(&amp;quot;n44w096&amp;quot;,&amp;quot;Fairmont_W&amp;quot;)
CallIt2(&amp;quot;n44w097&amp;quot;,&amp;quot;SiouxFalls_E&amp;quot;)
#CallIt2(&amp;quot;n45w092&amp;quot;,&amp;quot;EauClaire_W&amp;quot;)
CallIt2(&amp;quot;n45w093&amp;quot;,&amp;quot;StPaul_E&amp;quot;)
CallIt2(&amp;quot;n45w094&amp;quot;,&amp;quot;StPaul_W&amp;quot;)
CallIt2(&amp;quot;n45w095&amp;quot;,&amp;quot;NewUlm_E&amp;quot;)
CallIt2(&amp;quot;n45w096&amp;quot;,&amp;quot;NewUlm_W&amp;quot;)
CallIt2(&amp;quot;n45w097&amp;quot;,&amp;quot;Watertown_E&amp;quot;)
#CallIt2(&amp;quot;n46w093&amp;quot;,&amp;quot;Stillwater_E&amp;quot;)
#CallIt2(&amp;quot;n46w094&amp;quot;,&amp;quot;Stillwater_W&amp;quot;)
#CallIt2(&amp;quot;n46w095&amp;quot;,&amp;quot;StCloud_E&amp;quot;)
CallIt2(&amp;quot;n46w096&amp;quot;,&amp;quot;StCloud_W&amp;quot;)
CallIt2(&amp;quot;n46w097&amp;quot;,&amp;quot;Milbank_E&amp;quot;)
#CallIt2(&amp;quot;n47w092&amp;quot;,&amp;quot;Ashland_W&amp;quot;)
#CallIt2(&amp;quot;n47w093&amp;quot;,&amp;quot;Duluth_E&amp;quot;)
CallIt2(&amp;quot;n47w094&amp;quot;,&amp;quot;Duluth_W&amp;quot;)
CallIt2(&amp;quot;n47w095&amp;quot;,&amp;quot;Brainerd_E&amp;quot;)
CallIt2(&amp;quot;n47w096&amp;quot;,&amp;quot;Brainerd_W&amp;quot;)
CallIt2(&amp;quot;n47w097&amp;quot;,&amp;quot;Fargo_E&amp;quot;)
#CallIt2(&amp;quot;n48w090&amp;quot;,&amp;quot;Hancock_W&amp;quot;)
#CallIt2(&amp;quot;n48w091&amp;quot;,&amp;quot;TwoHarbors_E&amp;quot;)
#CallIt2(&amp;quot;n48w092&amp;quot;,&amp;quot;TwoHarbors_W&amp;quot;)
#CallIt2(&amp;quot;n48w093&amp;quot;,&amp;quot;Hibbing_E&amp;quot;)
#CallIt2(&amp;quot;n48w094&amp;quot;,&amp;quot;Hibbing_W&amp;quot;)
CallIt2(&amp;quot;n48w095&amp;quot;,&amp;quot;Bemidji_E&amp;quot;)
CallIt2(&amp;quot;n48w096&amp;quot;,&amp;quot;Bemidji_W&amp;quot;)
CallIt2(&amp;quot;n48w097&amp;quot;,&amp;quot;GrandForks_E&amp;quot;)
#CallIt2(&amp;quot;n48w098&amp;quot;,&amp;quot;GrandForks_W&amp;quot;)
#CallIt2(&amp;quot;n49w090&amp;quot;,&amp;quot;ThunderBay_W&amp;quot;)
#CallIt2(&amp;quot;n49w091&amp;quot;,&amp;quot;Quetico_E&amp;quot;)
#CallIt2(&amp;quot;n49w092&amp;quot;,&amp;quot;Quetico_W&amp;quot;)
#CallIt2(&amp;quot;n49w093&amp;quot;,&amp;quot;InternationFalls_E&amp;quot;)
#CallIt2(&amp;quot;n49w094&amp;quot;,&amp;quot;InternationFalls_W&amp;quot;)
CallIt2(&amp;quot;n49w095&amp;quot;,&amp;quot;Roseau_E&amp;quot;)
CallIt2(&amp;quot;n49w096&amp;quot;,&amp;quot;Roseau_W&amp;quot;)
#CallIt2(&amp;quot;n49w097&amp;quot;,&amp;quot;ThiefRiverFalls_E&amp;quot;)
CallIt2(&amp;quot;n49w098&amp;quot;,&amp;quot;ThiefRiverFalls_W&amp;quot;)
#CallIt2(&amp;quot;n50w095&amp;quot;,&amp;quot;Kenora_E&amp;quot;)
#CallIt2(&amp;quot;n50w096&amp;quot;,&amp;quot;Kenora_W&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;projectreclassifypy&#34;&gt;Project.Reclassify.py&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;# Import system modules
import sys, string, os, arcgisscripting

# Create the Geoprocessor object
gp = arcgisscripting.create()

# Check out any necessary licenses
gp.CheckOutExtension(&amp;quot;spatial&amp;quot;)

# Load required toolboxes...
gp.AddToolbox(&amp;quot;C:/Program Files/ArcGIS/ArcToolbox/Toolboxes/Spatial Analyst Tools.tbx&amp;quot;)
gp.AddToolbox(&amp;quot;C:/Program Files/ArcGIS/ArcToolbox/Toolboxes/Data Management Tools.tbx&amp;quot;)

# Script arguments...
def Process( inInputRaster, inOutputCoord, inConversionFactor, inOutputRaster, inCellSize, intempRasterFN):
Input_Raster = inInputRaster #sys.argv[1]
Output_Coordinate_System = inOutputCoord #sys.argv[3]
Input_raster_or_constant_value_2 = inConversionFactor #sys.argv[4]
Output_CellSize = inCellSize

#if Input_raster_or_constant_value_2 == &#39;#&#39;:
# Input_raster_or_constant_value_2 = &amp;quot;3.28084&amp;quot; # provide a default value if unspecified

Output_raster = inOutputRaster

# Local variables...
Temp_Raster = intempRasterFN

print Input_Raster
print Temp_Raster
print Output_Coordinate_System
print inCellSize

# Process: Project Raster...
gp.ProjectRaster_management(Input_Raster, Temp_Raster, Output_Coordinate_System, &amp;quot;CUBIC&amp;quot;, Output_CellSize, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;)

print Input_raster_or_constant_value_2
print Output_raster

# Process: Times...
gp.Times_sa(Temp_Raster, Input_raster_or_constant_value_2, Output_raster)
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    
  </channel>
</rss>
