<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>arcobject on Node Dangles</title>
    <link>https://maprantala.com/tags/arcobject/</link>
    <description>Recent content in arcobject on Node Dangles</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 17 Mar 2011 17:03:39 -0500</lastBuildDate>
    <atom:link href="https://maprantala.com/tags/arcobject/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Quick and Dirty arcpy: Field Listings</title>
      <link>https://maprantala.com/2011/03/17/quick-and-dirty-arcpy-field-listings/</link>
      <pubDate>Thu, 17 Mar 2011 17:03:39 -0500</pubDate>
      <guid>https://maprantala.com/2011/03/17/quick-and-dirty-arcpy-field-listings/</guid>
      <description>&lt;p&gt;I have to often get a table structure for a feature class or table into either a spreadsheet or word processing document.  There might be an easy way to do this in ArcGIS 10 but I haven&amp;rsquo;t found it.  So, as is my nature, I decided to roll my own.&lt;/p&gt;
&lt;p&gt;This is a &lt;a href=&#34;http://dl.dropbox.com/u/22241283/NodeDangles/20110316_ListFieldCounts-arcpy.zip&#34;&gt;bare-bones script&lt;/a&gt; that iterates through the fields, printing the field name, type, width, and precision.  There are three optional features to it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can choose to have it list the domain, if there is one, on each field.&lt;/li&gt;
&lt;li&gt;You can have it write to a text file (otherwise you can just copy &amp;amp; paste the results from the results window).&lt;/li&gt;
&lt;li&gt;You can have it count the number of populated records.  This can take a long time if working with a large dataset.  Also note that my logic for determining what constitutes being populated may not be what you need but the structure is there.  I also do not account for all field types, if the field is of a type I have not account for, the code will return -999.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To use the script from ArcToolbox, you need to pass it four parameters, their Names, type, whether they are input or output, and whether they are required or optional are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;featureclass, Table, Input, Required&lt;/li&gt;
&lt;li&gt;includedomainstring, Boolean, Input, Required (controls whether or not domains are exported)&lt;/li&gt;
&lt;li&gt;doCountsRespone, Boolean, Input, Required (controls whether or not you want to get the number of populated records.  (Your definition of populated may vary from my code)&lt;/li&gt;
&lt;li&gt;outputFile, File, Output, Optional (optional output file to write)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is the code, but you are better off &lt;a href=&#34;http://dl.dropbox.com/u/22241283/NodeDangles/20110316_ListFieldCounts-arcpy.zip&#34;&gt;just downloading&lt;/a&gt; it since I haven&amp;rsquo;t figured out a good way to have WordPress play nicely with python&amp;rsquo;s indenting.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Name: ListFields-arcpy.py
#
# Purpose: Lists the fields, their type, width, and precision
# Can either have it export it to a CSV file or copy
# and paste from the results window.
#
# To use, create a tool from the script and add 3 parameters:
#  1) Table, Input, Required
#  2) Boolean, Input, Required (controls whether or not domains are exported)
#  3) Boolean, Input, Rekquired (controls whether or not you want to get the number of
#  Populated records.&amp;amp;nbsp; (Your defintion of populated may vary from my code)
#  4) File, Output, Optional (optional output file to write)
#
#

import arcpy,sys,os

def printit(inMessage):
 print inMessage
 arcpy.AddMessage(inMessage)

if len(sys.argv) &amp;gt; 4:
 featureclass = sys.argv[1]
 includedomainstring = sys.argv[2]
 doCountsRespone = sys.argv[3]
 outputFile = sys.argv[4]
else:
 featureclass = &amp;quot;C:/temp/before.shp&amp;quot;
 includedomainstring = &amp;quot;false&amp;quot;
 doCountsRespone = &amp;quot;true&amp;quot;
 outputFile = &amp;quot;C:/temp/before.csv&amp;quot;

if (outputFile == &amp;quot;&amp;quot;):
 doOutputFile = False
else:
 doOutputFile = True

if (str(doCountsRespone).lower() == &amp;quot;true&amp;quot;):
 doCounts = True
else:
 doCounts = False

if (str(includedomainstring).lower() == &amp;quot;true&amp;quot;):
 includedomain = True
else:
 includedomain = False

lfields=arcpy.ListFields(featureclass)

d = arcpy.Describe(featureclass)
printit(&amp;quot;Dataset: &amp;quot;+d.baseName)
printit(&amp;quot;Type: &amp;quot;+d.dataType)
printit(&amp;quot;Path: &amp;quot;+d.catalogPath)
printit(&amp;quot; &amp;quot;)

tableheaders = &#39;name,type,width,precision&#39;

if (doCounts == True):
 tableheaders+=&amp;quot;,count&amp;quot;

if (includedomain == True):
 tableheaders+=&amp;quot;,domain&amp;quot;

if (doOutputFile):
 tmpfile = open(outputFile,&amp;quot;w&amp;quot;)
 tmpfile.write(tableheaders)
 tmpfile.write(&amp;quot;n&amp;quot;)

printit (tableheaders)
for lf in lfields:

 pThisline = lf.name+&amp;quot;,&amp;quot;+lf.type +&amp;quot;,&amp;quot;+str(lf.length)+&amp;quot;,&amp;quot;+str(lf.precision)

 if (doCounts == True):

 rowCount = 0

 #Note that I do not account for all field types
 #Also note that my definition of being populated may vary from yours.
 #I am using -999 as a flag to indicate a field type was not successfully
 #identified.
 if (lf.type == &amp;quot;Double&amp;quot;) or (lf.type == &amp;quot;Single&amp;quot;)&amp;amp;nbsp; or (lf.type == &amp;quot;Integer&amp;quot;) or (lf.type == &amp;quot;SmallInteger&amp;quot;):
  queryString = &#39;&amp;quot;&#39;+lf.name + &#39;&amp;quot; &amp;amp;gt; 0&#39;
  rows = arcpy.SearchCursor(featureclass, queryString, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;)
 elif (lf.type == &amp;quot;String&amp;quot;):
  queryString = &#39;&amp;quot;&#39;+lf.name + &#39;&amp;quot; &amp;lt;&amp;gt; &#39; + &amp;quot;&#39;&#39;&amp;quot;
  rows = arcpy.SearchCursor(featureclass, queryString, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;)
 else:
  rowCount = -999
  #rows = arcpy.SearchCursor(featureclass, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;)

 if (rowCount == 0):
  for row in rows:
   rowCount+=1

 pThisline=pThisline+&amp;quot;,&amp;quot;+str(rowCount)

 if (includedomain == True):
  pThisline=pThisline+&amp;quot;,&amp;quot;+lf.domain

 printit (pThisline)

 if (doOutputFile):
  tmpfile.write(pThisline)
  tmpfile.write(&amp;quot;n&amp;quot;)

if (doOutputFile):
 tmpfile.close
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
    <item>
      <title>Zipping a shapefile using python</title>
      <link>https://maprantala.com/2010/12/10/zipping-a-shapefile-using-python/</link>
      <pubDate>Fri, 10 Dec 2010 18:20:13 -0600</pubDate>
      <guid>https://maprantala.com/2010/12/10/zipping-a-shapefile-using-python/</guid>
      <description>&lt;h2 id=&#34;update&#34;&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://maprantala.com/2014/05/06/zipping-a-shapefile-from-arccatalog/&#34;&gt;After receiving a request to modify the code to ignore .lock files, I have an updated to this post.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One of the tasks I&amp;rsquo;ve been automating is publishing a weekly data update to a website. The update consists of shapefile. The trouble with shapefiles is they consist of 3 or more files with the same basename but different extensions in the same directory.&lt;/p&gt;
&lt;p&gt;Not an overly complicated situation but a common one that ArcGIS does not have a solution out-of-the-box. Below is a bare-bones code snippet to do it. It has both the input shapefile and output zip file hard-coded. The call to the subroutine that does the work is: zipShapefile(wellsShapeFile,wellsZipFile)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import zipfile
import sys
import os
import glob
wellsShapeFile = &amp;quot;C:/cwi5_bk/WELLS/wells.SHP&amp;quot;
wellsZipFile = &amp;quot;C:/cwi5_bk/WELLS/test5.zip&amp;quot;

def zipShapefile(inShapefile, newZipFN):
   print &#39;Starting to Zip &#39;+inShapefile+&#39; to &#39;+newZipFN

if not (os.path.exists(inShapefile)):
   print inShapefile + &#39; Does Not Exist&#39;
   return False

if (os.path.exists(newZipFN)):
   print &#39;Deleting &#39;+newZipFN
   os.remove(newZipFN)

if (os.path.exists(newZipFN)):
   print &#39;Unable to Delete&#39;+newZipFN
   return False

zipobj = zipfile.ZipFile(newZipFN,&#39;w&#39;)

for infile in glob.glob( inShapefile.lower().replace(&amp;quot;.shp&amp;quot;,&amp;quot;.*&amp;quot;)):
   print infile
   zipobj.write(infile,os.path.basename(infile),zipfile.ZIP_DEFLATED)

zipobj.close()
return True

zipShapefile(wellsShapeFile,wellsZipFile)
print &amp;quot;done!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;!-- raw HTML omitted --&gt;
</description>
    </item>
    
  </channel>
</rss>
